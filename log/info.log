23:03:12.485 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
23:03:12.490 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
23:03:12.490 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

23:03:13.938 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
23:03:13.939 [info] Access ChessWeb.Endpoint at http://localhost:4000
23:03:17.383 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "D3lVLxoxElMfeQ85cVwhBGM-JHpvaTZDW8fAyHg8nONc7ifgSUo0-3Y7", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "6", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:03:20.786 [error] Wrong row at: 6  --- %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}
23:03:20.786 [error] Wrong row at: 6  --- %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}
23:03:20.786 [error] Wrong row at: 6  --- %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}
23:03:20.787 [error] Wrong row at: 6  --- %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}
23:03:20.794 [error] GenServer #PID<0.806.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}} of type Chess.Square (a struct). This protocol is implemented for the following type(s): DBConnection.PrepareStream, DBConnection.Stream, Date.Range, Ecto.Adapters.SQL.Stream, File.Stream, Function, GenEvent.Stream, HashDict, HashSet, IO.Stream, Jason.OrderedObject, List, Map, MapSet, Phoenix.LiveView.LiveStream, Postgrex.Stream, Range, Stream
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map_reduce/3
    (elixir 1.15.7) lib/enum.ex:3841: Enum.with_index/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:391: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:389: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:960: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDeFLWwDYvyr4gAE", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "40", join_ref: "36"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDeFLWwDYvyr4gAE", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.806.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, l (truncated)
23:04:58.431 [error] Wrong row at: 7  --- %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}
23:04:58.431 [error] Wrong row at: 7  --- %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}
23:04:58.432 [error] GenServer #PID<0.849.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}} of type Chess.Square (a struct). This protocol is implemented for the following type(s): DBConnection.PrepareStream, DBConnection.Stream, Date.Range, Ecto.Adapters.SQL.Stream, File.Stream, Function, GenEvent.Stream, HashDict, HashSet, IO.Stream, Jason.OrderedObject, List, Map, MapSet, Phoenix.LiveView.LiveStream, Postgrex.Stream, Range, Stream
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map/2
    (elixir 1.15.7) lib/list.ex:1351: List.do_update_at/3
    (elixir 1.15.7) lib/list.ex:1355: List.do_update_at/3
    (chess 0.1.0) lib/chess/board.ex:54: Chess.Board.place_piece_in_square/3
    (chess 0.1.0) lib/chess/board.ex:16: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:16: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:74: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDeFLWwDYvyr4gAE", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "8"}}, ref: "43", join_ref: "41"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDeFLWwDYvyr4gAE", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.849.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left (truncated)
20:00:10.020 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:00:10.024 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:00:10.025 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:00:11.223 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:00:11.228 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:00:16.206 [info] CONNECTED TO Phoenix.LiveView.Socket in 82Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "D3lVLxoxElMfeQ85cVwhBGM-JHpvaTZDW8fAyHg8nONc7ifgSUo0-3Y7", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "9", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:00:18.330 [info] CONNECTED TO Phoenix.LiveView.Socket in 60Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "D3lVLxoxElMfeQ85cVwhBGM-JHpvaTZDW8fAyHg8nONc7ifgSUo0-3Y7", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "10", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:00:18.410 [info] GET /chess
20:00:18.468 [info] Sent 200 in 57ms
20:00:18.649 [error] ** (Bandit.HTTPError) closed
20:00:21.380 [info] CONNECTED TO Phoenix.LiveView.Socket in 72Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "bgtHMVcARBtBdBYZKQYmN1UOCQUsbBlN6Jt_4y1p0BWCo3aTeeBOn6v9", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:00:21.394 [info] CONNECTED TO Phoenix.LiveView.Socket in 76Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "bgtHMVcARBtBdBYZKQYmN1UOCQUsbBlN6Jt_4y1p0BWCo3aTeeBOn6v9", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:00:30.720 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:00:30.720 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:00:30.720 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:00:30.721 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:00:30.727 [error] GenServer #PID<0.804.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}} of type Chess.Square (a struct). This protocol is implemented for the following type(s): DBConnection.PrepareStream, DBConnection.Stream, Date.Range, Ecto.Adapters.SQL.Stream, File.Stream, Function, GenEvent.Stream, HashDict, HashSet, IO.Stream, Jason.OrderedObject, List, Map, MapSet, Phoenix.LiveView.LiveStream, Postgrex.Stream, Range, Stream
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map_reduce/3
    (elixir 1.15.7) lib/enum.ex:3841: Enum.with_index/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:391: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:389: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:960: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi13XrlAJFc6wAh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "12", join_ref: "10"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi13XrlAJFc6wAh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.804.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, l (truncated)
20:03:08.748 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:03:08.748 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:03:08.748 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:03:08.748 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:03:08.750 [error] GenServer #PID<0.857.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}} of type Chess.Square (a struct). This protocol is implemented for the following type(s): DBConnection.PrepareStream, DBConnection.Stream, Date.Range, Ecto.Adapters.SQL.Stream, File.Stream, Function, GenEvent.Stream, HashDict, HashSet, IO.Stream, Jason.OrderedObject, List, Map, MapSet, Phoenix.LiveView.LiveStream, Postgrex.Stream, Range, Stream
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map_reduce/3
    (elixir 1.15.7) lib/enum.ex:3841: Enum.with_index/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:391: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:389: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:960: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi13XrlAJFc6wAh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "15", join_ref: "13"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi13XrlAJFc6wAh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.857.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4,  (truncated)
20:04:30.473 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:04:30.473 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:04:30.473 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:04:30.475 [error] GenServer #PID<0.1004.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}} of type Chess.Square (a struct)
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map_reduce/3
    (elixir 1.15.7) lib/enum.ex:3841: Enum.with_index/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:391: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:389: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:960: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi13XrlAJFc6wAh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "18", join_ref: "16"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi13XrlAJFc6wAh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1004.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [],  (truncated)
20:04:45.630 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:04:45.630 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:04:45.630 [error] [{:board_check, 2} (Line 46)] {:<<>>, [line: 46], ["Wrong row at: ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:row_number, [line: 46], nil}]}, {:binary, [line: 46], nil}]}, "  --- ", {:"::", [line: 46], [{{:., [line: 46], [Kernel, :to_string]}, [line: 46], [{:inspect, [line: 46], [{:row, [line: 46], nil}]}]}, {:binary, [line: 46], nil}]}]}
20:04:45.633 [error] GenServer #PID<0.1111.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}} of type Chess.Square (a struct)
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map_reduce/3
    (elixir 1.15.7) lib/enum.ex:3841: Enum.with_index/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:391: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:389: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:960: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi13XrlAJFc6wAh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "21", join_ref: "19"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi13XrlAJFc6wAh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1111.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_rig (truncated)
20:09:49.364 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:09:49.376 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:09:49.377 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:09:50.762 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:09:50.765 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:09:51.150 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "bgtHMVcARBtBdBYZKQYmN1UOCQUsbBlN6Jt_4y1p0BWCo3aTeeBOn6v9", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "4", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:09:54.661 [info] CONNECTED TO Phoenix.LiveView.Socket in 36Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "bgtHMVcARBtBdBYZKQYmN1UOCQUsbBlN6Jt_4y1p0BWCo3aTeeBOn6v9", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "5", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:09:54.708 [info] GET /chess
20:09:54.757 [info] Sent 200 in 48ms
20:09:54.860 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "agcGJDUMI1wjUgUoLkIlBmQKET0VPhgb2F5JVuV7RdDrhwbeTaZwWdwo", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:09:54.900 [error] ** (Bandit.HTTPError) closed
20:09:57.912 [error] GenServer #PID<0.788.0> terminating
** (UndefinedFunctionError) function MyLogger.log/1 is undefined or private
    (chess 0.1.0) MyLogger.log("Board is Ok")
    (chess 0.1.0) lib/chess/board.ex:60: Chess.Board.place_piece_in_square/3
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:16: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:74: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi2Y6h4dR1a_ABI", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "9", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi2Y6h4dR1a_ABI", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.788.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {"7", "e"}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, ro (truncated)
20:10:21.696 [error] GenServer #PID<0.827.0> terminating
** (UndefinedFunctionError) function Logger.log/1 is undefined or private
    (logger 1.15.7) Logger.log("[{:board_check, 2} (Line 49)] \"Board is Ok\"")
    (chess 0.1.0) lib/chess/board.ex:60: Chess.Board.place_piece_in_square/3
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:16: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:74: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi2Y6h4dR1a_ABI", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "12", join_ref: "10"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi2Y6h4dR1a_ABI", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.827.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {"7", "e"}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %C (truncated)
20:10:57.214 [error] GenServer #PID<0.896.0> terminating
** (UndefinedFunctionError) function Logger.log/1 is undefined or private
    (logger 1.15.7) Logger.log("[{:board_check, 2} (Line 49)] \"Board is Ok\"")
    (chess 0.1.0) lib/chess/board.ex:60: Chess.Board.place_piece_in_square/3
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:16: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:74: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi2Y6h4dR1a_ABI", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "15", join_ref: "13"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi2Y6h4dR1a_ABI", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.896.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {"7", "e"}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %C (truncated)
20:11:20.069 [info] [{:board_check, 2} (Line 49)] "Board is Ok"
20:11:20.069 [info] [{:board_check, 2} (Line 49)] "Board is Ok"
20:17:10.166 [info] GET /chess
20:17:10.173 [info] Sent 200 in 6ms
20:17:10.173 [info] CONNECTED TO Phoenix.LiveView.Socket in 37Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "agcGJDUMI1wjUgUoLkIlBmQKET0VPhgb2F5JVuV7RdDrhwbeTaZwWdwo", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:17:10.173 [info] CONNECTED TO Phoenix.LiveView.Socket in 30Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "agcGJDUMI1wjUgUoLkIlBmQKET0VPhgb2F5JVuV7RdDrhwbeTaZwWdwo", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:17:10.174 [info] CONNECTED TO Phoenix.LiveView.Socket in 35Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "agcGJDUMI1wjUgUoLkIlBmQKET0VPhgb2F5JVuV7RdDrhwbeTaZwWdwo", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:17:10.282 [info] CONNECTED TO Phoenix.LiveView.Socket in 38Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "BwtCWwY8OxkHRXg8JX53NXcABAYTDgwW_Jq5eENrvs9fcK0VGkOLQTcb", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:17:10.303 [error] ** (Bandit.HTTPError) closed
20:17:13.625 [info] [{:board_check, 2} (Line 62)] "Board is Ok"
20:17:13.625 [info] [{:board_check, 2} (Line 62)] "Board is Ok"
20:22:01.444 [info] [{:board_check, 2} (Line 63)] "Board is Ok"
20:22:01.444 [info] [{:board_check, 2} (Line 63)] "Board is Ok"
20:22:05.016 [info] [{:board_check, 2} (Line 63)] "Board is Ok"
20:22:05.016 [info] [{:board_check, 2} (Line 63)] "Board is Ok"
20:22:06.221 [info] [{:board_check, 2} (Line 63)] "Board is Ok"
20:22:06.221 [info] [{:board_check, 2} (Line 63)] "Board is Ok"
20:25:06.140 [info] CONNECTED TO Phoenix.LiveView.Socket in 59Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "BwtCWwY8OxkHRXg8JX53NXcABAYTDgwW_Jq5eENrvs9fcK0VGkOLQTcb", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:27:15.292 [error] [{:board_check, 2} (Line 60)] {:<<>>, [line: 60], ["Wrong row at: ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:row_number, [line: 60], nil}]}, {:binary, [line: 60], nil}]}, "  --- ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:inspect, [line: 60], [{:row, [line: 60], nil}]}]}, {:binary, [line: 60], nil}]}]}
20:27:15.293 [error] [{:board_check, 2} (Line 60)] {:<<>>, [line: 60], ["Wrong row at: ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:row_number, [line: 60], nil}]}, {:binary, [line: 60], nil}]}, "  --- ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:inspect, [line: 60], [{:row, [line: 60], nil}]}]}, {:binary, [line: 60], nil}]}]}
20:27:15.293 [info] [{:board_check, 2} (Line 64)] "Board is Ok"
20:27:15.293 [info] [{:board_check, 2} (Line 64)] "Board is Ok"
20:27:27.246 [error] [{:board_check, 2} (Line 60)] {:<<>>, [line: 60], ["Wrong row at: ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:row_number, [line: 60], nil}]}, {:binary, [line: 60], nil}]}, "  --- ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:inspect, [line: 60], [{:row, [line: 60], nil}]}]}, {:binary, [line: 60], nil}]}]}
20:27:27.246 [error] [{:board_check, 2} (Line 60)] {:<<>>, [line: 60], ["Wrong row at: ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:row_number, [line: 60], nil}]}, {:binary, [line: 60], nil}]}, "  --- ", {:"::", [line: 60], [{{:., [line: 60], [Kernel, :to_string]}, [line: 60], [{:inspect, [line: 60], [{:row, [line: 60], nil}]}]}, {:binary, [line: 60], nil}]}]}
20:27:27.246 [info] [{:board_check, 2} (Line 64)] "Board is Ok"
20:27:27.246 [info] [{:board_check, 2} (Line 64)] "Board is Ok"
20:28:06.458 [error] [{:board_check, 2} (Line 61)] {:<<>>, [line: 61], ["Wrong row at: ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:row_number, [line: 61], nil}]}, {:binary, [line: 61], nil}]}, "  --- ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:inspect, [line: 61], [{:row, [line: 61], nil}]}]}, {:binary, [line: 61], nil}]}]}
20:28:06.458 [error] [{:board_check, 2} (Line 61)] {:<<>>, [line: 61], ["Wrong row at: ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:row_number, [line: 61], nil}]}, {:binary, [line: 61], nil}]}, "  --- ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:inspect, [line: 61], [{:row, [line: 61], nil}]}]}, {:binary, [line: 61], nil}]}]}
20:28:06.458 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:28:06.458 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:28:53.745 [error] GenServer #PID<0.1880.0> terminating
** (UndefinedFunctionError) function Chess.Game.move/2 is undefined (module Chess.Game is not available)
    (chess 0.1.0) Chess.Game.move(%{__struct__: Chess.Game, board: %{__struct__: Chess.Board, squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 5, loc: {5, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 5, loc: {5, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 5, loc: {5, :e (truncated)
20:28:54.824 [error] GenServer #PID<0.2198.0> terminating
** (UndefinedFunctionError) function Chess.Game.new/0 is undefined (module Chess.Game is not available)
    (chess 0.1.0) Chess.Game.new()
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:10: ChessWeb.Chesslive.mount/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/utils.ex:348: anonymous fn/6 in Phoenix.LiveView.Utils.maybe_call_live_view_mount!/5
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:1174: Phoenix.LiveView.Channel.verified_mount/8
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:84: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: {Phoenix.Channel, %{"flash" => nil, "params" => %{"_csrf_token" => "BwtCWwY8OxkHRXg8JX53NXcABAYTDgwW_Jq5eENrvs9fcK0VGkOLQTcb", "_mount_attempts" => 0, "_mounts" => 2, "_track_static" => ["http://localhost:4000/assets/app.css", "http://localhost:4000/assets/app.js"]}, "session" => "SFMyNTY.g2gDaAJhBXQAAAAIdwJpZG0AAAAUcGh4LUdEaTJ5UWxQZXBxVnpRQ0l3B3Nlc3Npb250AAAAAHcKcGFyZW50X3BpZHcDbmlsdwR2aWV3dxlFbGl4aXIuQ2hlc3NXZWIuQ2hlc3NsaXZldwhyb290X3BpZHcDbmlsdwZyb3V0ZXJ3FkVsaXhpci5DaGVzc1dlYi5Sb3V0ZXJ3DGxpdmVfc2Vzc2lvbmgCdwdkZWZhdWx0bggAy4Rp9YWFNxh3CXJvb3Rfdmlld3cZRWxpeGlyLkNoZXNzV2ViLkNoZXNzbGl2ZW4GABfdt16WAWIAAVGA.v9zw8gvV1M41IIPOzhSHe5eogoqXVBKIm6j-JGmL2ao", "static" => "SFMyNTY.g2gDaAJhBXQAAAADdwJpZG0AAAAUcGh4LUdEaTJ5UWxQZXBxVnpRQ0l3BWZsYXNodAAAAAB3CmFzc2lnbl9uZXdqbgYAF923XpYBYgABUYA.BCzkjiKKUYXTA45wozjv-m9KHNImQlGmNz4JZCcqbcA", "url" => "http://localhost:4000/chess"}, {#PID<0.1866.0>, #Reference<0.284592473.1732771843.119912>}, %Phoenix.Socket{assigns: %{}, channel: Phoenix.LiveView.Channel, channel_pid: nil, endpoint: ChessWeb.Endpoint, handler: Phoenix.LiveView.Socket, id: nil, joined: false, join_ref: "25", private: %{connect_info: %{session: %{"_csrf_token" => "XA3ncyukq6AZF5Gc0kKJBZot"}}}, pubsub_server: Chess.PubSub, ref: nil, serializer: Phoenix.Socket.V2.JSONSerializer, topic: "lv:phx-GDi2yQlPepqVzQCI", transport: :longpoll, transport_pid: #PID<0.1866.0>}}
State: #Reference<0.284592473.1732771843.119915>
20:28:54.829 [error] an exception was raised:
    ** (UndefinedFunctionError) function Chess.Game.new/0 is undefined (module Chess.Game is not available)
        (chess 0.1.0) Chess.Game.new()
        (chess 0.1.0) lib/chess_web/live/chesslive.ex:10: ChessWeb.Chesslive.mount/3
        (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/utils.ex:348: anonymous fn/6 in Phoenix.LiveView.Utils.maybe_call_live_view_mount!/5
        (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
        (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:1174: Phoenix.LiveView.Channel.verified_mount/8
        (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:84: Phoenix.LiveView.Channel.handle_info/2
        (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
        (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
        (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
20:29:05.051 [info] GET /chess
20:29:05.052 [info] Sent 200 in 1ms
20:29:05.154 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ChgeJScfQgY5XCs8BxgiKQUCCiAIbVwSRY-KDf7mHjjfA-eJ5iAjJ73f", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:29:05.160 [error] ** (Bandit.HTTPError) closed
20:29:07.543 [error] [{:board_check, 2} (Line 61)] {:<<>>, [line: 61], ["Wrong row at: ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:row_number, [line: 61], nil}]}, {:binary, [line: 61], nil}]}, "  --- ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:inspect, [line: 61], [{:row, [line: 61], nil}]}]}, {:binary, [line: 61], nil}]}]}
20:29:07.543 [error] [{:board_check, 2} (Line 61)] {:<<>>, [line: 61], ["Wrong row at: ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:row_number, [line: 61], nil}]}, {:binary, [line: 61], nil}]}, "  --- ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:inspect, [line: 61], [{:row, [line: 61], nil}]}]}, {:binary, [line: 61], nil}]}]}
20:29:07.543 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:29:07.543 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:08.439 [error] [{:board_check, 2} (Line 61)] {:<<>>, [line: 61], ["Wrong row at: ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:row_number, [line: 61], nil}]}, {:binary, [line: 61], nil}]}, "  --- ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:inspect, [line: 61], [{:row, [line: 61], nil}]}]}, {:binary, [line: 61], nil}]}]}
20:33:08.439 [error] [{:board_check, 2} (Line 61)] {:<<>>, [line: 61], ["Wrong row at: ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:row_number, [line: 61], nil}]}, {:binary, [line: 61], nil}]}, "  --- ", {:"::", [line: 61], [{{:., [line: 61], [Kernel, :to_string]}, [line: 61], [{:inspect, [line: 61], [{:row, [line: 61], nil}]}]}, {:binary, [line: 61], nil}]}]}
20:33:08.439 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:08.439 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:44.548 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:44.548 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:44.548 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:44.548 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:56.520 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:56.520 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:56.520 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:56.520 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:58.613 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:58.613 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:58.613 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:33:58.613 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:34:00.004 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:34:00.004 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:34:00.005 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:34:00.005 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:34:24.560 [info] GET /chess
20:34:24.567 [info] Sent 200 in 7ms
20:34:24.573 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ChgeJScfQgY5XCs8BxgiKQUCCiAIbVwSRY-KDf7mHjjfA-eJ5iAjJ73f", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:34:24.573 [info] CONNECTED TO Phoenix.LiveView.Socket in 49Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ChgeJScfQgY5XCs8BxgiKQUCCiAIbVwSRY-KDf7mHjjfA-eJ5iAjJ73f", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:34:24.574 [info] CONNECTED TO Phoenix.LiveView.Socket in 37Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ChgeJScfQgY5XCs8BxgiKQUCCiAIbVwSRY-KDf7mHjjfA-eJ5iAjJ73f", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:34:24.881 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "FjcLADAYRBNcTHJjdkFzC2o8EgQhDDUXNv8nSa1x-z390t4hZWYNcVZc", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:34:30.663 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:34:30.663 [error] GenServer #PID<0.2780.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Board.board_check/1
    (chess 0.1.0) lib/chess/board.ex:54: Chess.Board.board_check(:P)
    (chess 0.1.0) lib/chess/board.ex:16: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:16: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:74: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi3ueAAUX315hBB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "f", "row" => "5"}}, ref: "9", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi3ueAAUX315hBB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.2780.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {"7", "f"}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.S (truncated)
20:37:38.517 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:38.518 [error] GenServer #PID<0.2819.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Board.board_check/1
    (chess 0.1.0) lib/chess/board.ex:54: Chess.Board.board_check(:P)
    (chess 0.1.0) lib/chess/board.ex:16: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:16: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:74: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDi3ueAAUX315hBB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "5"}}, ref: "12", join_ref: "10"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDi3ueAAUX315hBB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.2819.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {"7", "g"}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square. (truncated)
20:38:19.186 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:19.186 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:19.186 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:19.186 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:26.123 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:26.123 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:26.123 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:26.123 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:27.503 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:27.503 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:27.504 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:27.504 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:28.844 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:28.844 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:28.844 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:28.844 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:30.415 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:30.415 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:30.415 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:30.415 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:31.329 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:31.329 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:31.329 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:31.329 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:32.570 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:32.570 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:32.570 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:32.570 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:36.411 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:36.411 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:36.411 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:36.411 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:37.580 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:37.580 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:37.581 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:37.581 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:39.210 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:39.210 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:39.210 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:39.211 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:40.138 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:40.138 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:40.138 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:40.138 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:41.491 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:41.491 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:41.491 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:41.492 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.089 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.089 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.089 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.089 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.888 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.888 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.888 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.889 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:44.665 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:44.665 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:44.665 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:44.665 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:45.479 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:45.480 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:45.480 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:45.480 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:46.569 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:46.569 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:46.569 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:46.569 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:47.783 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:47.783 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:47.783 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:47.783 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:49.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:49.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:49.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:49.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.100 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.101 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.101 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.101 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.962 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.962 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.962 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.962 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:52.046 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:52.046 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:52.046 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:52.046 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:55.245 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:55.245 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:55.246 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:55.246 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:57.305 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:57.305 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:57.306 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:57.306 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.266 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.267 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.267 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.267 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.134 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.134 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.134 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.134 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.712 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.712 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.712 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:59.712 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:01.397 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:01.397 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:01.398 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:01.398 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:04.598 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:04.598 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:04.598 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:04.598 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:05.299 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:05.299 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:05.299 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:05.299 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.319 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.319 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.319 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.319 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:07.449 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:07.449 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:07.450 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:07.450 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:09.724 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:09.724 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:09.724 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:09.724 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.668 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.668 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.669 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.669 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
21:25:13.134 [info] CONNECTED TO Phoenix.LiveView.Socket in 59Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "FjcLADAYRBNcTHJjdkFzC2o8EgQhDDUXNv8nSa1x-z390t4hZWYNcVZc", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "2", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:20:03.038 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:20:03.042 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:20:03.042 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:20:04.486 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:20:04.491 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:20:11.524 [info] GET /
20:20:15.612 [info] GET /chess
20:20:15.696 [info] Sent 200 in 84ms
20:20:15.829 [info] CONNECTED TO Phoenix.LiveView.Socket in 30Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DHEZOjNsChpBFwY6fhAGAiwGUip_PzBFk7Qpz9sC-OUnNjrRcS0D9NG-", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:20:15.845 [error] ** (Bandit.HTTPError) closed
20:20:19.907 [error] GenServer #PID<0.743.0> terminating
** (ArgumentError) the Access module does not support accessing lists by index, got: 1

Accessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module
    (elixir 1.15.7) lib/access.ex:334: Access.get/3
    (chess 0.1.0) lib/chess/game.ex:34: Chess.Game.position_to_square/3
    (chess 0.1.0) lib/chess/game.ex:17: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:77: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDlUHVs9rSYHNgJD", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "13", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDlUHVs9rSYHNgJD", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.743.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [],  (truncated)
20:21:15.209 [info] GET /chess
20:21:15.214 [info] Sent 200 in 5ms
20:21:15.306 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "AQcdeXg9IxNfCR8ZBykNAwUkDAUhOD9efAU31hZJ3QLM7SySJqnkgIH6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:21:17.226 [error] GenServer #PID<0.787.0> terminating
** (KeyError) key :board not found in: {:error, "black turn"}

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:16: ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/renderer.ex:79: Phoenix.LiveView.Renderer.to_rendered/2
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:959: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GDlUKzmkEA0HNgAk", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "13", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GDlUKzmkEA0HNgAk", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.787.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: [[%Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 3, loc: {3, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}], [%Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 4, loc: {4, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 4, loc: {4, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{co (truncated)
20:24:56.607 [info] GET /chess
20:24:56.611 [info] Sent 200 in 4ms
20:24:56.703 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "AXA6AX8xPGo6MR8icgwjOjoNUyYKJTIAf6rK6dE3ViLvBvWjuX1HLTEh", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:25:35.209 [info] GET /chess
20:25:35.213 [info] Sent 200 in 3ms
20:25:35.303 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "UScDLxNgQA0ra355RgwhPgUsGA8qHRYu6aKeZ59TG3--vvUnJyzallaF", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:27:01.294 [info] GET /chess
20:27:01.299 [info] Sent 200 in 5ms
20:27:01.397 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "KRImAT8PDCkbMAMtdgMOBwkiEztzNxRaNTnKvZupwhPyFyzWFwqU5Fc2", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:27:01.429 [error] ** (Bandit.HTTPError) closed
20:35:34.975 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:35:34.982 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:35:34.982 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:35:36.217 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:35:36.221 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:35:39.245 [info] CONNECTED TO Phoenix.LiveView.Socket in 61Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "KRImAT8PDCkbMAMtdgMOBwkiEztzNxRaNTnKvZupwhPyFyzWFwqU5Fc2", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:35:41.030 [info] CONNECTED TO Phoenix.LiveView.Socket in 101Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "KRImAT8PDCkbMAMtdgMOBwkiEztzNxRaNTnKvZupwhPyFyzWFwqU5Fc2", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:35:41.100 [info] GET /chess
20:35:41.145 [info] Sent 200 in 45ms
20:35:41.239 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "BCwQfy0jHG8gASYkBzZZBDwZBgQtMENFcjX5dve6LYup7L-TsLdjkA4-", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:35:44.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:44.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:44.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:44.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:55.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:55.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:55.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:35:55.204 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:11.177 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:11.177 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:11.177 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:11.178 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:46.075 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:46.075 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:46.075 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:46.075 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:51.344 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:51.344 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:51.344 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:51.344 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:52.617 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:52.617 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:52.617 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:52.618 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:53.359 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:53.359 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:53.359 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:53.360 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:54.454 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:54.454 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:54.454 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:54.454 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:56.766 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:56.766 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:56.766 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:56.767 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:58.944 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:58.944 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:58.944 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:36:58.944 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:02.960 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:02.960 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:02.960 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:02.960 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:05.540 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:05.540 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:05.540 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:37:05.540 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:03.444 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:03.444 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:03.444 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:03.444 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:05.713 [info] GET /chess
20:38:05.716 [info] Sent 200 in 3ms
20:38:05.805 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "E3IPBH83IG4qAjgZBBc2ZSsGNiw0LhxYt4GN6bY7FZkM4mB5dSTBr_k0", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:38:11.141 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:11.141 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:11.141 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:11.141 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:12.493 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:12.493 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:12.493 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:12.493 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:13.993 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:13.993 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:13.993 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:13.993 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:15.217 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:15.217 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:15.218 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:15.218 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:20.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:20.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:20.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:20.182 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:21.726 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:21.726 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:21.726 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:21.726 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:35.742 [info] GET /chess
20:38:35.745 [info] Sent 200 in 2ms
20:38:35.847 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "JSQ_fwETTzdcYAcVdzwHIAQ4LhdwMEEJBbw5HF6n08TAGFspKmLy6A6a", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:38:38.996 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:38.996 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:38.996 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:38.996 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.048 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.048 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.049 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:42.049 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:48.204 [info] GET /chess
20:38:48.207 [info] Sent 200 in 2ms
20:38:48.296 [info] CONNECTED TO Phoenix.LiveView.Socket in 36Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CAh7HnksMTZbKgonBCkkZAsGNhk0RT8coN3T0yHo7rYs4SP4DSTwr4Ht", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:38:50.620 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.620 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.621 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:50.621 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:51.629 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:51.629 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:51.629 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:51.630 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:54.746 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:54.746 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:54.746 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:54.746 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:56.367 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:56.367 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:56.367 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:56.368 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.809 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.809 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.809 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:38:58.809 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.914 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.915 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.915 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:06.915 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.955 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.955 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.955 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:10.956 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:12.650 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:12.651 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:12.651 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:12.651 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:26.116 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:26.116 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:26.116 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:26.116 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:28.054 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:28.054 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:28.054 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:28.054 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:29.654 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:29.654 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:29.654 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:29.654 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:30.734 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:30.735 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:30.735 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:30.735 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:39:56.892 [info] GET /chess
20:39:56.893 [info] Sent 200 in 1ms
20:39:56.981 [info] CONNECTED TO Phoenix.LiveView.Socket in 50Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "MTARCXtmJhs8FH4TdzISABUQWycqGgI9VvYC23_BPL-GGHfPZE9IlkuU", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:40:00.034 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:00.035 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:00.035 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:00.035 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:01.293 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:01.293 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:01.293 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:01.293 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:02.658 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:02.658 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:02.659 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:02.659 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:04.756 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:04.757 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:04.757 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:04.757 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:10.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:10.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:10.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:10.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:11.838 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:11.838 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:11.838 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:11.838 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:13.228 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:13.228 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:13.229 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:13.229 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:24.702 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:24.702 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:24.702 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:24.702 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:27.193 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:27.193 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:27.193 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:27.193 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:33.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:33.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:33.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:33.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:38.334 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:38.334 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:38.335 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:38.335 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:39.637 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:39.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:39.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:39.638 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:40.862 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:40.862 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:40.862 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:40.862 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:44.456 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:44.456 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:44.456 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:44.456 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:47.748 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:47.748 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:47.748 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:47.749 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:48.790 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:48.790 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:48.790 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
20:40:48.790 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:32:53.037 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
18:32:53.057 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
18:32:53.058 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

18:32:54.547 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
18:32:54.551 [info] Access ChessWeb.Endpoint at http://localhost:4000
18:33:03.166 [info] GET /
18:33:05.996 [info] GET /chess
18:33:06.143 [info] Sent 200 in 147ms
18:33:06.297 [info] CONNECTED TO Phoenix.LiveView.Socket in 47Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "IUV4MXwkKBpdPBg8KgAWFCd7dC4EFTMipp4DNpDP-IGeDbffWN8YsJ_r", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
18:33:18.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:18.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:18.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:18.657 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:19.854 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:19.854 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:19.855 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:19.855 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:21.040 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:21.040 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:21.040 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:21.040 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:23.702 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:23.702 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:23.703 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
18:33:23.703 [info] [{:board_check, 2} (Line 65)] "Board is Ok"
16:06:53.380 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:06:53.387 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:06:53.387 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:06:54.664 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:06:54.670 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:06:59.458 [info] GET /
16:06:59.668 [error] ** (Bandit.HTTPError) closed
16:07:02.526 [info] GET /chess
16:07:02.610 [info] Sent 500 in 83ms
16:07:02.617 [error] ** (ArgumentError) argument error
    (stdlib 5.2.3.1) :maps.from_list([%Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}])
    (chess 0.1.0) lib/chess/board.ex:90: Chess.Board.create_pawns/3
    (chess 0.1.0) lib/chess/board.ex:73: Chess.Board.initiate_board/0
    (chess 0.1.0) lib/chess/game.ex:12: Chess.Game.new/0
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:11: ChessWeb.Chesslive.mount/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/utils.ex:348: anonymous fn/6 in Phoenix.LiveView.Utils.maybe_call_live_view_mount!/5
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:320: Phoenix.LiveView.Static.call_mount_and_handle_params!/5
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:155: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.plug_builder_call/2
    (chess 0.1.0) deps/plug/lib/plug/debugger.ex:136: ChessWeb.Endpoint."call (overridable 3)"/2
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.call/2
    (phoenix 1.7.14) lib/phoenix/endpoint/sync_code_reload_plug.ex:22: Phoenix.Endpoint.SyncCodeReloadPlug.do_call/4
    (bandit 1.5.7) lib/bandit/pipeline.ex:124: Bandit.Pipeline.call_plug!/2
    (bandit 1.5.7) lib/bandit/pipeline.ex:36: Bandit.Pipeline.run/4
    (bandit 1.5.7) lib/bandit/http1/handler.ex:12: Bandit.HTTP1.Handler.handle_data/3
    (bandit 1.5.7) lib/bandit/delegating_handler.ex:18: Bandit.DelegatingHandler.handle_data/3
    (bandit 1.5.7) /home/gikes/Projects/Elixir/chess_live/chess/deps/thousand_island/lib/thousand_island/handler.ex:411: Bandit.DelegatingHandler.handle_continue/2

16:07:02.718 [error] ** (Bandit.HTTPError) closed
16:08:26.524 [info] GET /chess
16:08:26.653 [info] Sent 500 in 129ms
16:08:26.662 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:66: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:23: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:08:26.830 [error] ** (Bandit.HTTPError) closed
16:15:28.686 [info] GET /chess
16:15:28.737 [info] Sent 500 in 51ms
16:15:28.745 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:68: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:25: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:16:35.938 [info] GET /chess
16:16:36.004 [info] Sent 500 in 66ms
16:16:36.012 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:68: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:25: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:16:53.082 [info] GET /chess
16:16:53.131 [info] Sent 500 in 49ms
16:16:53.139 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:66: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:23: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:23:07.958 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:23:07.961 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:23:07.961 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:23:08.988 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:23:08.991 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:23:16.533 [info] GET /chess
16:23:16.695 [info] Sent 500 in 162ms
16:23:16.701 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:66: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:23: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:24:12.901 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:24:12.906 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:24:12.906 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:24:14.163 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:24:14.167 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:24:17.018 [info] GET /chess
16:24:17.165 [info] Sent 500 in 146ms
16:24:17.171 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:66: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:23: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:27:41.981 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:27:41.988 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:27:41.988 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:27:43.273 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:27:43.276 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:27:47.278 [info] GET /chess
16:27:47.467 [info] Sent 500 in 188ms
16:27:47.472 [error] ** (KeyError) key :column not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:66: anonymous fn/3 in ChessWeb.Chesslive."square (overridable 1)"/1
    (chess 0.1.0) /home/gikes/Projects/Elixir/chess_live/chess/lib/chess_web/live/chesslive.ex:23: ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:493: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:582: anonymous fn/3 in Phoenix.LiveView.Diff.traverse_comprehension/5
    (elixir 1.15.7) lib/enum.ex:1819: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:503: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5

16:30:39.915 [info] GET /chess
16:30:39.981 [info] Sent 500 in 66ms
16:30:39.989 [error] ** (KeyError) key :row not found in: nil

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:59: ChessWeb.Chesslive."square (overridable 1)"/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/tag_engine.ex:92: Phoenix.LiveView.TagEngine.component/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:23: anonymous fn/6 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:414: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.plug_builder_call/2
    (chess 0.1.0) deps/plug/lib/plug/debugger.ex:136: ChessWeb.Endpoint."call (overridable 3)"/2
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.call/2
    (phoenix 1.7.14) lib/phoenix/endpoint/sync_code_reload_plug.ex:22: Phoenix.Endpoint.SyncCodeReloadPlug.do_call/4

16:31:47.779 [info] GET /chess
16:31:47.846 [info] Sent 500 in 66ms
16:31:47.853 [error] ** (KeyError) key :row not found in: %{
  square: nil,
  __changed__: nil,
  row_index: 1,
  col_index: 1,
  __given__: %{square: nil, __changed__: nil, row_index: 1, col_index: 1}
}
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:59: ChessWeb.Chesslive."square (overridable 1)"/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/tag_engine.ex:92: Phoenix.LiveView.TagEngine.component/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:23: anonymous fn/6 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:414: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.plug_builder_call/2
    (chess 0.1.0) deps/plug/lib/plug/debugger.ex:136: ChessWeb.Endpoint."call (overridable 3)"/2
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.call/2
    (phoenix 1.7.14) lib/phoenix/endpoint/sync_code_reload_plug.ex:22: Phoenix.Endpoint.SyncCodeReloadPlug.do_call/4

16:31:47.994 [error] ** (Bandit.HTTPError) closed
16:34:09.913 [info] GET /chess
16:34:10.007 [info] Sent 500 in 94ms
16:34:10.018 [error] ** (KeyError) key :row not found in: %{
  square: %Chess.Square{
    column: :a,
    row: 1,
    loc: {1, :a},
    piece: :r,
    sees: %Chess.Square.Sees{
      up: [],
      down: [],
      left: [],
      right: [],
      up_right: [],
      up_left: [],
      down_left: [],
      down_right: [],
      knight: [],
      all: MapSet.new([])
    }
  },
  __changed__: nil,
  row_index: 1,
  col_index: 1,
  __given__: %{
    square: %Chess.Square{
      column: :a,
      row: 1,
      loc: {1, :a},
      piece: :r,
      sees: %Chess.Square.Sees{
        up: [],
        down: [],
        left: [],
        right: [],
        up_right: [],
        up_left: [],
        down_left: [],
        down_right: [],
        knight: [],
        all: MapSet.new([])
      }
    },
    __changed__: nil,
    row_index: 1,
    col_index: 1
  }
}
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:59: ChessWeb.Chesslive."square (overridable 1)"/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/tag_engine.ex:92: Phoenix.LiveView.TagEngine.component/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:23: anonymous fn/6 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:22: anonymous fn/4 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:20: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:414: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:412: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:288: Phoenix.LiveView.Static.to_rendered_content_tag/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/static.ex:171: Phoenix.LiveView.Static.do_render/4
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/controller.ex:39: Phoenix.LiveView.Controller.live_render/3
    (phoenix 1.7.14) lib/phoenix/router.ex:484: Phoenix.Router.__call__/5
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.plug_builder_call/2
    (chess 0.1.0) deps/plug/lib/plug/debugger.ex:136: ChessWeb.Endpoint."call (overridable 3)"/2
    (chess 0.1.0) lib/chess_web/endpoint.ex:1: ChessWeb.Endpoint.call/2
    (phoenix 1.7.14) lib/phoenix/endpoint/sync_code_reload_plug.ex:22: Phoenix.Endpoint.SyncCodeReloadPlug.do_call/4

16:34:58.278 [info] GET /chess
16:34:58.289 [info] Sent 200 in 11ms
16:34:58.392 [info] CONNECTED TO Phoenix.LiveView.Socket in 34Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "JgcEVDouFB4cPBR7YmZpNHkLABF0BAA7vQG2IEviwirK031mTdZhARhY", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:34:58.448 [error] ** (Bandit.HTTPError) closed
21:56:08.862 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
21:56:08.866 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
21:56:08.866 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

21:56:10.058 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
21:56:10.062 [info] Access ChessWeb.Endpoint at http://localhost:4000
21:56:15.085 [info] GET /
21:56:17.959 [info] GET /chess
21:56:18.038 [info] Sent 200 in 79ms
21:56:18.147 [info] CONNECTED TO Phoenix.LiveView.Socket in 76Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ZwMICWF2ODEidlwwABQAezULDi5-C1sISv9M19MfOO9gK_O4sohXOxoj", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:01:50.100 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
22:01:50.107 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
22:01:50.107 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

22:01:51.384 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
22:01:51.387 [info] Access ChessWeb.Endpoint at http://localhost:4000
22:01:52.523 [info] CONNECTED TO Phoenix.LiveView.Socket in 59Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ZwMICWF2ODEidlwwABQAezULDi5-C1sISv9M19MfOO9gK_O4sohXOxoj", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:01:54.514 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ZwMICWF2ODEidlwwABQAezULDi5-C1sISv9M19MfOO9gK_O4sohXOxoj", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:01:54.562 [info] GET /chess
22:01:54.611 [info] Sent 200 in 48ms
22:01:54.723 [info] CONNECTED TO Phoenix.LiveView.Socket in 38Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GRAFLmIIQGI-bBIuL34rAzcNFBlgP38X-e4j2G55SUwyd5dLqiroQLKu", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:01:54.763 [error] ** (Bandit.HTTPError) closed
22:03:10.763 [info] GET /chess
22:03:10.769 [info] Sent 200 in 6ms
22:03:11.048 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "XBFdCGl-JWAXDiQQMgEIHHM9CCcIBFUxhdlL91P7z7AGyJGS5YnQ9waS", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:03:11.073 [error] ** (Bandit.HTTPError) closed
22:03:17.211 [error] GenServer #PID<0.852.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGPU3BTGfzVAAj", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "15", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGPU3BTGfzVAAj", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.852.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{...}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, ...}, piece: :P, ...}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {...}, ...}, {7, :h} => %Chess.Square{colum (truncated)
22:03:33.858 [error] GenServer #PID<0.855.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGPU3BTGfzVAAj", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "20", join_ref: "16"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGPU3BTGfzVAAj", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.855.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{...}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, ...}, piece: :P, ...}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {...}, ...}, {7, :h} => %Chess.Square{colu (truncated)
22:04:07.849 [info] GET /chess
22:04:07.853 [info] Sent 200 in 3ms
22:04:07.942 [info] CONNECTED TO Phoenix.LiveView.Socket in 49Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "UBZbPDE1HBxafQhnIxR3ICwNCQ54SmRTdcjxaziK7Dm0h_8ojioxI9P1", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:04:07.961 [error] ** (Bandit.HTTPError) closed
22:04:16.172 [error] GenServer #PID<0.886.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGSphlHLfzVAQC", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "5"}}, ref: "15", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGSphlHLfzVAQC", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.886.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{...}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, ...}, piece: :P, ...}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {...}, ...}, {7, :h} => %Chess.Square{colum (truncated)
22:04:26.672 [error] GenServer #PID<0.890.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGSphlHLfzVAQC", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "f", "row" => "5"}}, ref: "18", join_ref: "16"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGSphlHLfzVAQC", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.890.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{...}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, ...}, piece: :P, ...}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {...}, ...}, {7, :h} => %Chess.Square{colu (truncated)
22:04:37.743 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
22:04:37.757 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
22:04:37.757 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

22:04:38.923 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
22:04:38.925 [info] Access ChessWeb.Endpoint at http://localhost:4000
22:04:40.429 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "UBZbPDE1HBxafQhnIxR3ICwNCQ54SmRTdcjxaziK7Dm0h_8ojioxI9P1", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "2", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:04:41.005 [info] CONNECTED TO Phoenix.LiveView.Socket in 38Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "UBZbPDE1HBxafQhnIxR3ICwNCQ54SmRTdcjxaziK7Dm0h_8ojioxI9P1", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:04:41.040 [info] GET /chess
22:04:41.088 [info] Sent 200 in 47ms
22:04:41.176 [info] CONNECTED TO Phoenix.LiveView.Socket in 36Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ekwGdTg-TGIaSh0SLwwiBQowKTMJIU1TN971hq95wsxEdGmJLTOE8Ry1", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:04:41.224 [error] ** (Bandit.HTTPError) closed
22:06:29.526 [error] GenServer #PID<0.781.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGUlUG7dTsaQEF", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "18", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGUlUG7dTsaQEF", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.781.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {1, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, ...}, piece: :P, ...}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {...}, ...}, {4, :g} => %Chess.Square{column: :g, row: 4, ...}, {2, ...} => %Chess.Square{column: :c, ...}, {...} => %Chess.Square{...}, ...}}, turn: :black}}, transport_pid: #PID<0.774.0>, ...>, components: {%{}, %{}, 1}, topic: "lv:phx-GEEGUlUG7dTsaQEF", serializer: Phoenix.Socket.V2.JSONSerializer, join_ref: "4", upload_names: %{}, upload_pids: %{}}
22:07:40.494 [error] GenServer #PID<0.795.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGUlUG7dTsaQEF", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "f", "row" => "4"}}, ref: "23", join_ref: "19"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGUlUG7dTsaQEF", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.795.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {3, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, ...}, piece: :P, ...}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {...}, ...}, {4, :g} => %Chess.Square{column: :g, row: 4, ...}, {2, ...} => %Chess.Square{column: :c, ...}, {...} => %Chess.Square{...}, ...}}, turn: :white}}, transport_pid: #PID<0.774.0>, ...>, components: {%{}, %{}, 1}, topic: "lv:phx-GEEGUlUG7dTsaQEF", serializer: Phoenix.Socket.V2.JSONSerializer, join_ref: "19", upload_names: %{}, upload_pids: %{}}
22:09:18.329 [info] GET /chess
22:09:18.332 [info] Sent 200 in 3ms
22:09:18.428 [info] CONNECTED TO Phoenix.LiveView.Socket in 49Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "dUxmcWR6LyI9dSsSOHI_ATwgDiVAIUUwA9W545ZuPLNEs9pNzDhSqRqR", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:09:18.445 [error] ** (Bandit.HTTPError) closed
22:09:33.188 [error] GenServer #PID<0.861.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGkuJnOSqNYAAm", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "15", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGkuJnOSqNYAAm", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.861.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {1, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, ...}, piece: :P, ...}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {...}, ...}, {4, :g} => %Chess.Square{column: :g, row: 4, ...}, {2, ...} => %Chess.Square{column: :c, ...}, {...} => %Chess.Square{...}, ...}}, turn: :black}}, transport_pid: #PID<0.854.0>, ...>, components: {%{}, %{}, 1}, topic: "lv:phx-GEEGkuJnOSqNYAAm", serializer: Phoenix.Socket.V2.JSONSerializer, join_ref: "4", upload_names: %{}, upload_pids: %{}}
22:09:43.873 [error] GenServer #PID<0.865.0> terminating
** (BadStructError) expected a struct named Chess.Square, got: nil
    (chess 0.1.0) lib/chess/board.ex:23: anonymous fn/1 in Chess.Board.remove_piece_from_square/2
    (elixir 1.15.7) lib/map.ex:957: Map.get_and_update/3
    (chess 0.1.0) lib/chess/board.ex:22: Chess.Board.remove_piece_from_square/2
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGkuJnOSqNYAAm", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "18", join_ref: "16"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGkuJnOSqNYAAm", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.865.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {0, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, ...}, piece: :P, ...}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {...}, ...}, {4, :g} => %Chess.Square{column: :g, row: 4, ...}, {2, ...} => %Chess.Square{column: :c, ...}, {...} => %Chess.Square{...}, ...}}, turn: :white}}, transport_pid: #PID<0.854.0>, ...>, components: {%{}, %{}, 1}, topi (truncated)
22:10:18.039 [info] GET /chess
22:10:18.047 [info] Sent 200 in 7ms
22:10:18.338 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ASMDFAEGJRQPWy8bEw88KwJRDD1pXlgY5V2PQIPCbbJLXDsdD5jKX-lz", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:11:09.068 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
22:11:09.077 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
22:11:09.077 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

22:11:10.213 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
22:11:10.216 [info] Access ChessWeb.Endpoint at http://localhost:4000
22:11:10.918 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ASMDFAEGJRQPWy8bEw88KwJRDD1pXlgY5V2PQIPCbbJLXDsdD5jKX-lz", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:12:49.428 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ASMDFAEGJRQPWy8bEw88KwJRDD1pXlgY5V2PQIPCbbJLXDsdD5jKX-lz", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:12:49.476 [info] GET /chess
22:12:49.517 [info] Sent 200 in 40ms
22:12:49.610 [info] CONNECTED TO Phoenix.LiveView.Socket in 313Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "BDtXdCZ6RzAbYSI0ciAeJS8JFwVpJBkG0Nf0v52gvXGc9kQjimqsXW-d", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:12:49.654 [error] ** (Bandit.HTTPError) closed
22:12:58.274 [error] GenServer #PID<0.843.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEEGxA3FQsbwpwAk", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "15", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEEGxA3FQsbwpwAk", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.843.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {2, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :a} => %Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, ...}, piece: :P, ...}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {...}, ...}, {4, :g} => %Chess.Square{column: :g, row: 4, ...}, {2, ...} => %Chess.Square{column: :c, ...}, {...} => %Chess.Square{...}, ...}}, turn: :black}}, transport_pid: #PID<0.836.0>, ...>, components: {%{}, %{}, 1}, topic: "lv:phx-GEEGxA3FQsbwpwAk", serializer: Phoenix.Socket.V2.JSONSerializer, join_ref: "4", upload_names: %{}, upload_pids: %{}}
18:40:50.340 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
18:40:50.348 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
18:40:50.348 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

18:40:52.076 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
18:40:52.080 [info] Access ChessWeb.Endpoint at http://localhost:4000
18:41:04.322 [info] GET /
18:41:10.754 [info] GET /chess
18:41:10.839 [info] Sent 200 in 84ms
18:41:11.073 [info] CONNECTED TO Phoenix.LiveView.Socket in 50Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "fkB-Cy1ILDoObgAsXSo2Ozg9PC4uFgRi2v-G_8dcM4YnmHudZqiWhz1Q", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
18:42:55.236 [error] GenServer #PID<0.730.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:15: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:76: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEGYYImR_27-mgVB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "f", "row" => "4"}}, ref: "18", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEGYYImR_27-mgVB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.730.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, ...}, piece: :R, ...}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {...}, ...}, {6, :f} => %Chess.Square{column: : (truncated)
18:46:56.124 [info] GET /chess
18:46:56.130 [info] Sent 200 in 5ms
18:46:56.232 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "KHkZGQgIOhF0MR8mfFoQLQ4KZR8yNGJadOJUzxrH7kFdL8SrlF0ftXWi", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
18:46:56.287 [error] ** (Bandit.HTTPError) closed
19:04:52.745 [info] GET /chess
19:04:52.748 [info] Sent 200 in 3ms
19:04:52.840 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "NmwCD0oWAg0LEQguQ08ZbFoDeAl2K0RQzZQC8fJTHKQls-Z38O-p0Gqc", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:05:43.459 [info] GET /chess
19:05:43.462 [info] Sent 200 in 2ms
19:05:43.538 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DgEaHzsveggQMGwyUgsBGE91IwEWD3hhB7ISI_2QSj5pbiBG-9vxPcMR", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:06:34.525 [info] GET /chess
19:06:34.531 [info] Sent 200 in 6ms
19:06:34.935 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CwQZOQMHG28LESwXeykxZgsvAy0cAmNxG2JuqwS6HKuUKKr9icVTZnVB", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:06:34.962 [error] ** (Bandit.HTTPError) closed
19:09:01.985 [error] GenServer #PID<0.1068.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:77: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEGZw09hlMrZIgUD", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "a", "row" => "4"}}, ref: "21", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEGZw09hlMrZIgUD", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1068.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, ...}, piece: :R, ...}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {...}, ...}, {6, :f} => %Chess.Square{column:  (truncated)
19:16:42.347 [info] GET /chess
19:16:42.387 [info] Sent 200 in 40ms
19:16:42.546 [info] CONNECTED TO Phoenix.LiveView.Socket in 70Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Nn5kDSQ8HjcLNDEnUyETExYcBB08NFlfzH7AVLVnHnhecCPLtPQdzXll", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:16:50.477 [error] GenServer #PID<0.1165.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:78: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEGaUNRoGb7amwXh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "a", "row" => "4"}}, ref: "15", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEGaUNRoGb7amwXh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1165.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, ...}, piece: :R, ...}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {...}, ...}, {6, :f} => %Chess.Square{ (truncated)
19:37:54.556 [info] GET /chess
19:37:54.572 [info] Sent 200 in 16ms
19:37:54.679 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "P2YqIjU_LWkgFwMdXDIyDAYEPzwrKEZXsPynGOe0cMZ_lPqSdHjEmDsd", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:38:05.074 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:38:05.087 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:38:05.088 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:38:06.574 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:38:06.580 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:38:11.145 [info] GET /chess
19:38:11.323 [info] Sent 200 in 178ms
19:38:11.406 [info] CONNECTED TO Phoenix.LiveView.Socket in 35Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "C0AcKkVBKw8BbTZvdRcoZxEeEwAtQVlbGvOf71cVB7o-Euk8sRFyk-lh", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:43:18.624 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:43:18.631 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:43:18.632 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:43:20.213 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:43:20.218 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:43:21.879 [info] GET /chess
19:43:22.023 [info] Sent 200 in 143ms
19:43:22.151 [info] CONNECTED TO Phoenix.LiveView.Socket in 56Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DVUSPBocOm0hHQlxeRIlazYPMz4KPnFhAcAphlr4bGP3Ipf4TCfGLRDR", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:43:33.628 [info] GET /chess
19:43:33.635 [info] Sent 200 in 6ms
19:43:33.742 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DlIxBxk5eg51EWAzSjQQFlEUAR8kAVtABdbKkI2W6K9qzVSI3XTfbmns", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:46:43.926 [error] GenServer #PID<0.769.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:80: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEGbx_xDCjHeGgdh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "a", "row" => "3"}}, ref: "21", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEGbx_xDCjHeGgdh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.769.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :a} => %Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{...}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, ...}, piece: nil, ...}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {...}, ...}, {4, :h} => %Chess.Square{column: :h,  (truncated)
19:46:54.599 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:46:54.604 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:46:54.604 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:46:55.760 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:46:55.764 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:47:00.768 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DlIxBxk5eg51EWAzSjQQFlEUAR8kAVtABdbKkI2W6K9qzVSI3XTfbmns", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:50:16.374 [error] GenServer #PID<0.731.0> terminating
** (MatchError) no match of right hand side value: {:error, :empty_square}
    (chess 0.1.0) lib/chess/board.ex:17: Chess.Board.apply_move/2
    (chess 0.1.0) lib/chess/game.ex:20: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEGbx_xDCjHeGgdh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "6"}}, ref: "31", join_ref: "25"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEGbx_xDCjHeGgdh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.731.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :g} => %Chess.Square{column: :g, row: 7, loc: {7, :g}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {3, :b} => %Chess.Square{column: :b, row: 3, loc: {3, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{...}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, ...}, piece: :p, ...}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {...}, ...}, {6, :b} => %Chess.Square{column: :b,  (truncated)
19:53:44.512 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:53:44.517 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:53:44.517 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:53:45.636 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:53:45.639 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:53:51.078 [info] CONNECTED TO Phoenix.LiveView.Socket in 76Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DlIxBxk5eg51EWAzSjQQFlEUAR8kAVtABdbKkI2W6K9qzVSI3XTfbmns", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:54:08.183 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DlIxBxk5eg51EWAzSjQQFlEUAR8kAVtABdbKkI2W6K9qzVSI3XTfbmns", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "4", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:54:08.269 [info] GET /chess
19:54:08.341 [info] Sent 200 in 71ms
19:54:08.514 [info] CONNECTED TO Phoenix.LiveView.Socket in 56Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "O2IpFRYcOx4JLS4bBRIUbAV9LQATK2FewTzYdlsGJwwY5pW3g1xyUGTm", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:54:08.566 [error] ** (Bandit.HTTPError) closed
19:57:34.894 [info] GET /chess
19:57:34.904 [info] Sent 200 in 10ms
19:57:35.174 [info] CONNECTED TO Phoenix.LiveView.Socket in 49Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GwEAKxcFBhs7IgkoeT0OHAotYiwzCQFfW7SgeuNBxxPjI_MCha7Uue4l", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:57:35.206 [error] ** (Bandit.HTTPError) closed
19:57:48.900 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:57:48.915 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:57:48.915 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:57:50.226 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:57:50.231 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:57:54.107 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GwEAKxcFBhs7IgkoeT0OHAotYiwzCQFfW7SgeuNBxxPjI_MCha7Uue4l", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:12:56.626 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:12:56.639 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:12:56.639 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:12:58.042 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:12:58.046 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:13:00.437 [info] CONNECTED TO Phoenix.LiveView.Socket in 54Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GwEAKxcFBhs7IgkoeT0OHAotYiwzCQFfW7SgeuNBxxPjI_MCha7Uue4l", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:11:56.939 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:11:56.949 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:11:56.949 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:11:58.136 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:11:58.139 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:12:08.923 [info] GET /
19:12:13.491 [info] GET /chess
19:12:13.624 [info] Sent 200 in 132ms
19:12:13.770 [info] CONNECTED TO Phoenix.LiveView.Socket in 34Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "bhBQT0leFSsgSSM5Ml9bQzp2KSooKyUX7H1915szAzHMe0l4OOQCmhtB", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:12:13.800 [error] ** (Bandit.HTTPError) closed
19:12:33.315 [info] GET /chess
19:12:33.325 [info] Sent 200 in 10ms
19:12:33.611 [info] CONNECTED TO Phoenix.LiveView.Socket in 51Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CigKHjxGURgZXCRHJjtNHD9hLVt1AigSSpkhD-7IxoO3qTzkJXU20AyG", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:12:48.217 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:12:48.227 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:12:48.227 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:12:49.462 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:12:49.465 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:12:49.964 [info] GET /chess
19:12:50.054 [info] CONNECTED TO Phoenix.LiveView.Socket in 52Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CigKHjxGURgZXCRHJjtNHD9hLVt1AigSSpkhD-7IxoO3qTzkJXU20AyG", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:12:50.151 [info] Sent 200 in 187ms
19:12:50.259 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CDo1ICdbNWhMbF0bOiRUEgxbChxwNSMHQbTV_0S9-_6omKceybru5vrR", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:12:50.300 [error] ** (Bandit.HTTPError) closed
19:14:34.060 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:14:34.066 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:14:34.066 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:14:35.422 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:14:35.433 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:14:35.867 [info] GET /chess
19:14:35.907 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CDo1ICdbNWhMbF0bOiRUEgxbChxwNSMHQbTV_0S9-_6omKceybru5vrR", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:14:36.063 [info] Sent 200 in 196ms
19:14:36.408 [info] CONNECTED TO Phoenix.LiveView.Socket in 50Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "MWkuMTlcHGcXdQUmMVdhIT9OMVEKdQgvh1OGA7z6vFnRf8VVJwI8O6Yz", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:15:06.730 [info] GET /chess
19:15:06.736 [info] Sent 200 in 5ms
19:15:06.919 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Ny0mMzccDwhQch8_BCxAFjFeIisddzNtnuGEOwiY1AtKSCwaDgZBX4b8", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:15:06.976 [error] ** (Bandit.HTTPError) closed
19:22:25.527 [info] GET /chess
19:22:25.530 [info] Sent 200 in 2ms
19:22:25.619 [info] CONNECTED TO Phoenix.LiveView.Socket in 69Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "PjdYIkkhEGUZd0ZEGxZuPUxhPhwrBBJggo9T1Jv4xD-0LyYJ9XFunGC5", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:22:25.646 [error] ** (Bandit.HTTPError) closed
19:22:46.709 [info] GET /chess
19:22:46.712 [info] Sent 200 in 3ms
19:22:46.803 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EBcjNRACMCI5eSxZOCIPKD1dNyEuEgg5IOBChiVsXJG-oM8_HdOHkQYl", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:23:55.656 [info] GET /chess
19:23:55.664 [info] Sent 200 in 8ms
19:23:55.906 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "MDEbPS5YLysgWBE5ZgpbQDNyDAIkcxIgiizKV3IzAkzM1el7FKtka0Cu", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:24:26.093 [info] GET /chess
19:24:26.097 [info] Sent 200 in 4ms
19:24:26.194 [info] CONNECTED TO Phoenix.LiveView.Socket in 37Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "LxEtExIbAChQVjlFI1dCIC8LJyMaIBgivILejpfy1eR1t8uWZ2_J_cIw", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:38:27.544 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:38:27.549 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:38:27.549 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:38:28.815 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:38:28.820 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:38:32.497 [info] GET /
20:38:35.149 [info] GET /chess
20:38:35.261 [info] Sent 200 in 112ms
20:38:35.395 [info] CONNECTED TO Phoenix.LiveView.Socket in 35Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "PBQLXh5KLhsFRgItHSAvXnwMMyVZGFIcJP21KrFPv-kgElW6JCFInMb1", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:38:35.431 [error] ** (Bandit.HTTPError) closed
16:35:50.439 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:35:50.445 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:35:50.445 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:35:51.848 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:35:51.865 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:35:56.382 [info] GET /
16:35:59.117 [info] GET /chess
16:35:59.229 [info] Sent 200 in 111ms
16:35:59.393 [info] CONNECTED TO Phoenix.LiveView.Socket in 32Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "SSEiAh1kdnBjRkJuEQEeJCY6IRcdAAoh9dIztQGFZw6-k9iFJHOgSlDf", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:35:59.424 [error] ** (Bandit.HTTPError) closed
16:37:28.028 [info] GET /chess
16:37:28.032 [info] Sent 200 in 3ms
16:37:28.124 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Oj0dSQZfAHh-fBMLFFcULS4eLB8RJjgfJxv1oj1NGMgHnocOBlBo_JvX", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:37:30.067 [error] GenServer #PID<0.810.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.Pawn.moves/2
    (chess 0.1.0) lib/chess/pieces/pawn.ex:38: Chess.Pieces.Pawn.moves(%Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :g} => %Chess.Square{column: :g, row: 7, loc: {7, :g}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_rig (truncated)
16:37:37.291 [error] GenServer #PID<0.813.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.Pawn.moves/2
    (chess 0.1.0) lib/chess/pieces/pawn.ex:38: Chess.Pieces.Pawn.moves(%Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :g} => %Chess.Square{column: :g, row: 7, loc: {7, :g}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_rig (truncated)
16:39:53.430 [info] GET /chess
16:39:53.435 [info] Sent 200 in 5ms
16:39:53.640 [info] CONNECTED TO Phoenix.LiveView.Socket in 30Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OhZeKSJ4A3RvSyImLW8GCi4zNxwiOwUwJS5QKM2BVzVeWWqhBAYllWKw", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:42:26.448 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:42:26.454 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:42:26.454 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:42:27.847 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:42:27.851 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:42:28.022 [info] CONNECTED TO Phoenix.LiveView.Socket in 60Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OhZeKSJ4A3RvSyImLW8GCi4zNxwiOwUwJS5QKM2BVzVeWWqhBAYllWKw", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:42:28.961 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OhZeKSJ4A3RvSyImLW8GCi4zNxwiOwUwJS5QKM2BVzVeWWqhBAYllWKw", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:42:29.026 [info] GET /chess
16:42:29.082 [info] Sent 200 in 55ms
16:42:29.185 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CXAzEi5jYUZTWisQQ0w0UFo0KzosXR8Sy5XjGVPpjk_S9tC26FEJb1QU", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:44:07.372 [info] GET /chess
16:44:07.379 [info] Sent 200 in 7ms
16:44:07.631 [info] CONNECTED TO Phoenix.LiveView.Socket in 54Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "IHY7MVwDQXoBRw0nP1svMi48QyR2PRcjP3PI56pL8vydEcXPBN-T8QYd", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:44:07.729 [error] ** (Bandit.HTTPError) closed
16:44:51.421 [info] GET /chess
16:44:51.426 [info] Sent 200 in 4ms
16:44:51.517 [info] CONNECTED TO Phoenix.LiveView.Socket in 50Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "BTQTIShECWJcSS52SEI0NTgWWAcAOyh1uqxYAq8TexZ52zCWTd6wNWf2", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:44:51.549 [error] ** (Bandit.HTTPError) closed
16:46:47.585 [info] GET /chess
16:46:47.592 [info] Sent 200 in 6ms
16:46:47.845 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "RhUxGz1cYXkMXz02CAkfBhtEKRcCJxgA6PZcTiPO5nIur1hdw6GgLKVG", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:53:50.518 [info] GET /chess
16:53:50.522 [info] Sent 200 in 3ms
16:53:50.604 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "HDEjIBpCXkELdDwmGFQVMAo7N0MjIHomltHXswow2EHeblbRfIY3mL4a", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:56:31.233 [info] GET /chess
16:56:31.237 [info] Sent 200 in 3ms
16:56:31.321 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "SH07Pz1FekJ1ATAMAE07BlgUPUc9MzgK88PGTpKtL0DOzuLd4fS7s_vM", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:22:51.458 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
16:22:51.475 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
16:22:51.476 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

16:22:53.539 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
16:22:53.543 [info] Access ChessWeb.Endpoint at http://localhost:4000
16:22:56.935 [info] GET /
16:22:59.980 [info] GET /chess
16:23:00.103 [info] Sent 200 in 123ms
16:23:00.255 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "WloaLzgePAEcYwUHTxU4Kh4BHw8YKxxBm1cJwwUjIR5eyopzpdjVtYqx", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
16:38:32.686 [info] GET /chess
16:38:32.689 [info] Sent 200 in 3ms
16:38:32.778 [info] CONNECTED TO Phoenix.LiveView.Socket in 38Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "QlozLCdeLS4KSVEEBg0hEzcpOxYHQS8Ou1JIh7DE_xaf0wiCYLNOk3B7", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:26:56.978 [info] GET /chess
19:26:56.979 [info] Sent 200 in 1ms
19:26:57.070 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DkZPLR5eHRptXgInUCAuCF8cMxQ8MypM9-6HQ7tq8o2EfZfX1yFMPAGu", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:29:22.281 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:29:22.285 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:29:22.285 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:29:23.656 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:29:23.661 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:29:24.302 [info] CONNECTED TO Phoenix.LiveView.Socket in 48Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DkZPLR5eHRptXgInUCAuCF8cMxQ8MypM9-6HQ7tq8o2EfZfX1yFMPAGu", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:29:28.715 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DkZPLR5eHRptXgInUCAuCF8cMxQ8MypM9-6HQ7tq8o2EfZfX1yFMPAGu", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:29:28.798 [info] GET /chess
20:29:28.852 [info] Sent 200 in 53ms
20:29:28.969 [info] CONNECTED TO Phoenix.LiveView.Socket in 36Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Bx8LPBU4Kylmf1MERR4pKDlUAzomBDUP0trYZQBB3NcfsdaxW1vcJvX6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:29:29.001 [error] ** (Bandit.HTTPError) closed
21:45:59.101 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
21:45:59.106 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
21:45:59.106 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

21:46:00.296 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
21:46:00.301 [info] Access ChessWeb.Endpoint at http://localhost:4000
21:46:04.409 [info] GET /
21:46:07.963 [info] GET /chess
21:46:08.167 [info] Sent 200 in 204ms
21:46:08.444 [info] CONNECTED TO Phoenix.LiveView.Socket in 59Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "NRgmN0sEWQ0zOhhGNSMPUmkXMnNnHQxwaqgX9FoRqpt5gpckPSj11YX6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:46:34.083 [info] GET /chess
21:46:34.087 [info] Sent 200 in 3ms
21:46:34.166 [info] CONNECTED TO Phoenix.LiveView.Socket in 56Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "eREpOwgmfgooLDoDNzAgV3IRMy89cBgW-xhTzdHUjfVpecLnKUkmk4LP", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:46:34.197 [error] ** (Bandit.HTTPError) closed
21:49:01.216 [info] GET /chess
21:49:01.221 [info] Sent 200 in 4ms
21:49:01.311 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "DFEOHiAQVGZ3HCRCAmM4YXYQGnsJASAfX8OqRRb95VH1P0TXOTB9_EtY", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:49:01.331 [error] ** (Bandit.HTTPError) closed
19:11:33.445 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:11:33.451 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:11:33.451 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:11:34.904 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:11:34.909 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:11:42.425 [info] GET /
19:11:45.202 [info] GET /chess
19:11:45.316 [info] Sent 200 in 114ms
19:11:45.461 [info] CONNECTED TO Phoenix.LiveView.Socket in 37Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Az0eSB4jDzdhOnt5NRcPKx4UJ0dUQiMs7zq0gb6X-TJNrrixkDb03wSh", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:13:37.796 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
19:13:37.802 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
19:13:37.802 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

19:13:39.105 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
19:13:39.109 [info] Access ChessWeb.Endpoint at http://localhost:4000
19:13:39.471 [info] CONNECTED TO Phoenix.LiveView.Socket in 54Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Az0eSB4jDzdhOnt5NRcPKx4UJ0dUQiMs7zq0gb6X-TJNrrixkDb03wSh", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:13:55.638 [info] CONNECTED TO Phoenix.LiveView.Socket in 95Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Az0eSB4jDzdhOnt5NRcPKx4UJ0dUQiMs7zq0gb6X-TJNrrixkDb03wSh", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:13:55.697 [info] GET /chess
19:13:55.744 [info] Sent 200 in 46ms
19:13:55.865 [info] CONNECTED TO Phoenix.LiveView.Socket in 85Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "QDdeNRoZaAgZGWRGCi8xZx4XBiATQjIBtp1McXQgUwUqMJW4kGCWtwBE", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
19:13:55.904 [error] ** (Bandit.HTTPError) closed
20:58:39.701 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:58:39.707 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:58:39.708 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:58:40.910 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:58:40.914 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:58:47.782 [info] GET /
20:58:52.172 [info] GET /chess
20:58:52.286 [info] Sent 200 in 114ms
20:58:52.437 [info] CONNECTED TO Phoenix.LiveView.Socket in 35Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OgYMd29YVAdfBFMTAU0EeTgjdSYcHXMZkNh8_jlngIepD8w8AzDlWXJa", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:59:48.221 [info] GET /chess
20:59:48.222 [info] Sent 200 in 1ms
20:59:48.304 [info] CONNECTED TO Phoenix.LiveView.Socket in 53Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Ix8PKHRZC15rD31OdTw4IioqQWcEI0k5rWkgDk37SBK-0IKcSsp-OfpA", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:17:27.338 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
21:17:27.343 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
21:17:27.343 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

21:17:28.571 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
21:17:28.574 [info] Access ChessWeb.Endpoint at http://localhost:4000
21:17:30.406 [info] CONNECTED TO Phoenix.LiveView.Socket in 46Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Ix8PKHRZC15rD31OdTw4IioqQWcEI0k5rWkgDk37SBK-0IKcSsp-OfpA", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:17:35.733 [info] CONNECTED TO Phoenix.LiveView.Socket in 30Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Ix8PKHRZC15rD31OdTw4IioqQWcEI0k5rWkgDk37SBK-0IKcSsp-OfpA", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:17:35.759 [info] GET /chess
21:17:35.810 [info] Sent 200 in 50ms
21:17:35.902 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "aDoTf0BbQC9ueAJQExw2GE8wCCkgNQ4T9rw0pixFV543ViEY6i9ckp7k", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:17:35.940 [error] ** (Bandit.HTTPError) closed
21:18:09.430 [info] GET /chess
21:18:09.431 [info] Sent 200 in 1ms
21:18:09.517 [info] CONNECTED TO Phoenix.LiveView.Socket in 36Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Kw8vA11AClxCKlkACSAkNjAJdmcJC0g3zGKLmr25zgocLUWwIPG-BNqO", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:20:19.814 [info] GET /chess
21:20:19.819 [info] Sent 200 in 4ms
21:20:19.906 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "MHk0OAkFfT9-N10uHBsJNjRrVgwUCFgIa1Pw97EVFzkMYnzwM2gF_Map", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:30:32.439 [info] GET /chess
21:30:32.446 [info] Sent 200 in 6ms
21:30:32.621 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Hx4nFWheCj1KOEM6DjkYKxc7fzwpDmA3NVCZXl2TruuYKLkjnbNvbKYO", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:30:32.649 [error] ** (Bandit.HTTPError) closed
21:30:37.307 [error] GenServer #PID<0.1007.0> terminating
** (ArgumentError) errors were found at the given arguments:

  * 1st argument: the device does not exist

    (stdlib 5.2.3.1) io.erl:98: :io.put_chars(:p, [[label: "targeted piece"], 10])
    (chess 0.1.0) lib/chess/move_builder.ex:19: anonymous fn/6 in Chess.MoveBuilder.build_moves/4
    (elixir 1.15.7) lib/enum.ex:4830: Enumerable.List.reduce/3
    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhiYvgAfGZukgCC", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "f", "row" => "4"}}, ref: "19", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhiYvgAfGZukgCC", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1007.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :a} => %Chess.Square{column: :a, row: 8, loc: {8, :a}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down:  (truncated)
21:31:15.544 [info] GET /chess
21:31:15.550 [info] Sent 200 in 6ms
21:31:15.871 [info] CONNECTED TO Phoenix.LiveView.Socket in 57Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "AgsNOVNobER6O1IZCw80DSl0eg17E1soSCivcZT-BvdzNzGLP-KG0VbP", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:32:57.696 [info] GET /chess
21:32:57.701 [info] Sent 200 in 5ms
21:32:57.797 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CwYqAmZ3fz9tfgIoARwseRozfh85EnccZNNMVEGVU34KDi_8cjOUrWNd", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:34:04.010 [info] GET /chess
21:34:04.015 [info] Sent 200 in 5ms
21:34:04.114 [info] CONNECTED TO Phoenix.LiveView.Socket in 43Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "IyQXH3xkDCtzLGIXFyoJBCM0QB4PdGkcrlsPLV4BKaTtR_zEZmqTD1Pd", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:35:28.740 [info] GET /chess
21:35:28.747 [info] Sent 200 in 6ms
21:35:28.944 [info] CONNECTED TO Phoenix.LiveView.Socket in 48Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Bj0KKn15c1BhC2ULBzs-LxhpWgsDLVASWuneMKK9YFShBNMna0kAHhij", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:38:06.423 [info] GET /chess
21:38:06.427 [info] Sent 200 in 4ms
21:38:06.557 [info] CONNECTED TO Phoenix.LiveView.Socket in 35Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "YTs3AwRVfAtodVBUPzA8Cj0TeTwkHFEI0sSL4gDbP8f7zEOKDJHvoYhp", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:39:02.891 [info] GET /chess
21:39:02.896 [info] Sent 200 in 5ms
21:39:03.133 [info] CONNECTED TO Phoenix.LiveView.Socket in 49Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OisyC3F-QCxKe1FTDU0YdS8LbnwHFgkrkcVDALxEr6g0H8k4VR_6LS0S", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:39:19.400 [info] GET /chess
21:39:19.404 [info] Sent 200 in 3ms
21:39:19.482 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "aR4qOUJgVBNrdWMSCR5DOTIrBhIpN3UZ8VNvrRlzS8UqLk0xKr7XbrLa", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:40:21.489 [info] GET /chess
21:40:21.493 [info] Sent 200 in 3ms
21:40:21.566 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "MwRVYn1LaVoLDHQSLyQ7Mg0wYSwzN3VNbL1-MyQ33ABqjQHstiPfxrL5", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:42:24.166 [info] GET /chess
21:42:24.169 [info] Sent 200 in 2ms
21:42:24.242 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EHgVLkdzWQN8JF4wKS8rKx8eYD4INlE3A0qawAajDihSlZXjfGQtCshO", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:43:26.750 [info] GET /chess
21:43:26.754 [info] Sent 200 in 4ms
21:43:26.826 [info] CONNECTED TO Phoenix.LiveView.Socket in 38Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "ID9dCEEHcwVBKEYXMjdKbEAvfwctFWgpqw9Gq5KlyeptwB9-9vNMfPQQ", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:44:18.375 [info] GET /chess
21:44:18.377 [info] Sent 200 in 2ms
21:44:18.445 [info] CONNECTED TO Phoenix.LiveView.Socket in 57Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "CQJXeG9eYi9hJ3kqPBsXbAALcjkSCXJIXJ37_lZFYjOIynd-yRCsYLK0", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:44:18.491 [error] ** (Bandit.HTTPError) closed
21:44:49.561 [info] GET /chess
21:44:49.563 [info] Sent 200 in 2ms
21:44:49.642 [info] CONNECTED TO Phoenix.LiveView.Socket in 51Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "M30dKmcCQgt2EmUGaA8ZNj8MQysFN0NOb5yeW0zbN_Se-zjwFUraNrz6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:15:18.798 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
22:15:18.808 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
22:15:18.808 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

22:15:20.011 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
22:15:20.016 [info] Access ChessWeb.Endpoint at http://localhost:4000
22:15:25.320 [info] GET /chess
22:15:25.451 [info] Sent 200 in 130ms
22:15:28.326 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "IjAGfXVEThtRYF8lFyMLGQpuRn0FP1FOsxb2Evvri-iFRVxXs7w7Nzh6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:15:28.334 [info] CONNECTED TO Phoenix.LiveView.Socket in 35Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "IjAGfXVEThtRYF8lFyMLGQpuRn0FP1FOsxb2Evvri-iFRVxXs7w7Nzh6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:15:31.944 [error] GenServer #PID<0.721.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.PiecesLib.generate_paths/3
    (chess 0.1.0) lib/chess/pieces/pieces_lib.ex:17: Chess.Pieces.PiecesLib.generate_paths(%Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, 0}, 8)
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/pieces/queen.ex:17: Chess.Pieces.Queen.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhk1fdyRTJSeQUB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "4"}}, ref: "16", join_ref: "10"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhk1fdyRTJSeQUB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.721.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, clicked_square: {1, :d}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2 (truncated)
22:16:54.559 [info] GET /chess
22:16:54.570 [info] Sent 200 in 11ms
22:16:54.578 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "IjAGfXVEThtRYF8lFyMLGQpuRn0FP1FOsxb2Evvri-iFRVxXs7w7Nzh6", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:16:54.832 [info] CONNECTED TO Phoenix.LiveView.Socket in 58Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "JwkqBlRkVjxnAgAABzwXKjcfWg8PJ1ETvANIdVnU_O6cBIdkNFkEDbhk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:17:01.356 [error] GenServer #PID<0.970.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.PiecesLib.generate_paths/3
    (chess 0.1.0) lib/chess/pieces/pieces_lib.ex:17: Chess.Pieces.PiecesLib.generate_paths(%Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, 0}, 8)
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/pieces/queen.ex:18: Chess.Pieces.Queen.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhk6rtM5YDSVwAi", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "4"}}, ref: "13", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhk6rtM5YDSVwAi", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.970.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, clicked_square: {1, :d}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :f} => %Chess.Square{column: :f, row: 8, loc: {8, :f}, piece: :B, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :f} => %Chess.Square{column: :f, row: 4, loc: {4, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :a} => %Chess.Square{column: :a, row: 5, loc: {5, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, (truncated)
22:17:18.501 [info] GET /chess
22:17:18.507 [info] CONNECTED TO Phoenix.LiveView.Socket in 34Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "JwkqBlRkVjxnAgAABzwXKjcfWg8PJ1ETvANIdVnU_O6cBIdkNFkEDbhk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:17:18.507 [info] CONNECTED TO Phoenix.LiveView.Socket in 36Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "JwkqBlRkVjxnAgAABzwXKjcfWg8PJ1ETvANIdVnU_O6cBIdkNFkEDbhk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:17:18.509 [info] Sent 200 in 8ms
22:17:18.775 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "PHABOFVYdlxiAVUHCUIRch5rRXgucm0Bm8ewejN5ZLcdL7b3g2t2e7Ty", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:17:53.398 [info] GET /chess
22:17:53.401 [info] Sent 200 in 3ms
22:17:53.409 [info] CONNECTED TO Phoenix.LiveView.Socket in 32Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "PHABOFVYdlxiAVUHCUIRch5rRXgucm0Bm8ewejN5ZLcdL7b3g2t2e7Ty", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:17:53.501 [info] CONNECTED TO Phoenix.LiveView.Socket in 30Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Ewo7GlZfAT5-AFg5AB8RLRoTXSJ_L1MUBB_Ufm9WFMnZEjblcJlh4jjl", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:21:16.684 [info] GET /chess
22:21:16.686 [info] Sent 200 in 1ms
22:21:16.803 [info] CONNECTED TO Phoenix.LiveView.Socket in 33Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EBwnYm98QSNXH3dUHRBDBhAqYAA_GhQiATC-_NyJoRA7Xe0GisQJt_-Z", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
22:21:16.827 [error] ** (Bandit.HTTPError) closed
23:09:26.713 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
23:09:26.721 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
23:09:26.722 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

23:09:27.992 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
23:09:27.995 [info] Access ChessWeb.Endpoint at http://localhost:4000
23:09:30.198 [info] CONNECTED TO Phoenix.LiveView.Socket in 51Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EBwnYm98QSNXH3dUHRBDBhAqYAA_GhQiATC-_NyJoRA7Xe0GisQJt_-Z", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:09:31.940 [info] CONNECTED TO Phoenix.LiveView.Socket in 56Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EBwnYm98QSNXH3dUHRBDBhAqYAA_GhQiATC-_NyJoRA7Xe0GisQJt_-Z", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:09:33.480 [info] CONNECTED TO Phoenix.LiveView.Socket in 41Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EBwnYm98QSNXH3dUHRBDBhAqYAA_GhQiATC-_NyJoRA7Xe0GisQJt_-Z", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:09:33.499 [info] GET /chess
23:09:33.513 [info] CONNECTED TO Phoenix.LiveView.Socket in 42Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "EBwnYm98QSNXH3dUHRBDBhAqYAA_GhQiATC-_NyJoRA7Xe0GisQJt_-Z", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:09:33.552 [info] Sent 200 in 52ms
23:09:33.678 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OCwNHVpFQj18GXEHMRQ8EA4TfiM7M0gsidiRjwzTDTGdtaOQwJOipvqT", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:09:33.720 [error] ** (Bandit.HTTPError) closed
23:09:35.410 [error] GenServer #PID<0.799.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for {3, 4} of type Tuple. This protocol is implemented for the following type(s): DBConnection.PrepareStream, DBConnection.Stream, Date.Range, Ecto.Adapters.SQL.Stream, File.Stream, Function, GenEvent.Stream, HashDict, HashSet, IO.Stream, Jason.OrderedObject, List, Map, MapSet, Phoenix.LiveView.LiveStream, Postgrex.Stream, Range, Stream
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess/pieces/pawn.ex:14: Chess.Pieces.Pawn.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhnyj1c03le6gVB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "9", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhnyj1c03le6gVB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.799.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {2, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :a} => %Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Sq (truncated)
23:16:16.391 [info] GET /chess
23:16:16.397 [info] Sent 200 in 6ms
23:16:16.401 [info] CONNECTED TO Phoenix.LiveView.Socket in 38Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "OCwNHVpFQj18GXEHMRQ8EA4TfiM7M0gsidiRjwzTDTGdtaOQwJOipvqT", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:16:16.514 [info] CONNECTED TO Phoenix.LiveView.Socket in 53Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Hz4gA1Jgbj15K1oOFSMSdAFtYDARfVAMNvDLbRVTAflmPVa5x4QzZ8it", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:16:16.525 [error] ** (Bandit.HTTPError) closed
23:16:18.003 [error] GenServer #PID<0.1189.0> terminating
** (Protocol.UndefinedError) protocol Enumerable not implemented for {1, 0} of type Tuple
    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3
    (elixir 1.15.7) lib/enum.ex:4387: Enum.map/2
    (chess 0.1.0) lib/chess/pieces/pawn.ex:13: Chess.Pieces.Pawn.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhoKAj9deH24wDi", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "e", "row" => "4"}}, ref: "9", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhoKAj9deH24wDi", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1189.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {2, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :a} => %Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{...}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, ...}, piece: :p, ...}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {...}, ...}, {8, :d} => %Chess.Square{column: :d, row: 8, ...}, {6, ...} => %Chess.Square{column: :a, ...}, {...} => %Chess.Square{...}, ...} (truncated)
23:17:17.796 [info] GET /chess
23:17:17.801 [info] Sent 200 in 4ms
23:17:17.807 [info] CONNECTED TO Phoenix.LiveView.Socket in 44Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Hz4gA1Jgbj15K1oOFSMSdAFtYDARfVAMNvDLbRVTAflmPVa5x4QzZ8it", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:17:17.807 [info] CONNECTED TO Phoenix.LiveView.Socket in 53Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Hz4gA1Jgbj15K1oOFSMSdAFtYDARfVAMNvDLbRVTAflmPVa5x4QzZ8it", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:17:17.821 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Hz4gA1Jgbj15K1oOFSMSdAFtYDARfVAMNvDLbRVTAflmPVa5x4QzZ8it", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:17:17.905 [info] CONNECTED TO Phoenix.LiveView.Socket in 49Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GTtXeWFzT1xCKXgAKjw0DRRpYSZ6EncTHs36QAw5zdNcoIGLm0Pl1WNk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:17:17.925 [error] ** (Bandit.HTTPError) closed
23:17:36.826 [error] GenServer #PID<0.1368.0> terminating
** (UndefinedFunctionError) function Chess.MoveBuilder.build_moves/4 is undefined or private
    (chess 0.1.0) Chess.MoveBuilder.build_moves([[{2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {7, 3}, {8, 3}], [], [{1, 4}, {1, 5}, {1, 6}, {1, 7}], [{1, 2}, {1, 1}, {1, 0}], [{2, 4}, {3, 5}, {4, 6}, {5, 7}], [{2, 2}, {3, 1}, {4, 0}], [], []], %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :a} => %Chess.Square{column: :a, row: 3, loc: {3, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :f} => %Chess.Square{column: :f, row: 5, loc: {5, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :f} => %Chess.Square{column: :f, row: 3, loc: {3, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :b} => %Chess.Square{column: :b, row: 1, loc: {1, :b}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :a} => %Chess.Square{column: :a, row: 2, loc: {2, :a}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, { (truncated)
23:19:13.651 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
23:19:13.663 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
23:19:13.663 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

23:19:15.088 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
23:19:15.091 [info] Access ChessWeb.Endpoint at http://localhost:4000
23:19:18.881 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GTtXeWFzT1xCKXgAKjw0DRRpYSZ6EncTHs36QAw5zdNcoIGLm0Pl1WNk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:19:40.803 [error] GenServer #PID<0.718.0> terminating
** (UndefinedFunctionError) function MoveBuilder.build_moves/3 is undefined (module MoveBuilder is not available)
    MoveBuilder.build_moves([[], [{7, 7}, {6, 7}, {5, 7}, {4, 7}, {3, 7}, {2, 7}, {1, 7}], [{8, 6}, {8, 5}, {8, 4}, {8, 3}, {8, 2}, {8, 1}, {8, 0}], []], %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {8, :b}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :d} => %Chess.Square{column: :d, row: 8, loc: {8, :d}, piece: :Q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :g} => %Chess.Square{column: :g, row: 3, loc: {3, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :h} => %Chess.Square{column: :h, row: 7, loc: {7, :h}, piece (truncated)
23:20:59.407 [info] CONNECTED TO Phoenix.LiveView.Socket in 39Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GTtXeWFzT1xCKXgAKjw0DRRpYSZ6EncTHs36QAw5zdNcoIGLm0Pl1WNk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:20:59.417 [info] CONNECTED TO Phoenix.LiveView.Socket in 37Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "GTtXeWFzT1xCKXgAKjw0DRRpYSZ6EncTHs36QAw5zdNcoIGLm0Pl1WNk", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "3", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:20:59.484 [info] GET /chess
23:20:59.527 [info] Sent 200 in 42ms
23:20:59.640 [info] CONNECTED TO Phoenix.LiveView.Socket in 28Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "JwwFKXJBQSx-fmURIyAZBjRuQxA_CFwgvDafBsyEF3SrfUjGM7rZtMeX", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:21:18.653 [info] GET /chess
23:21:18.656 [info] Sent 200 in 3ms
23:21:18.760 [info] CONNECTED TO Phoenix.LiveView.Socket in 34Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "PywoGwBkeQ53IFoLGjIrLy81SAgaC1wBndLT0VAgOmlh_GXnVlyBQNey", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
23:21:18.780 [error] ** (Bandit.HTTPError) closed
23:21:53.327 [error] GenServer #PID<0.1331.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.PiecesLib.generate_paths/3
    (chess 0.1.0) lib/chess/pieces/pieces_lib.ex:17: Chess.Pieces.PiecesLib.generate_paths(%Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, 1}, 8)
    (elixir 1.15.7) lib/enum.ex:1693: Enum."-map/2-lists^map/1-1-"/2
    (chess 0.1.0) lib/chess/pieces/bishop.ex:18: Chess.Pieces.Bishop.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhobmk3qu8CCQUB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "b", "row" => "2"}}, ref: "41", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhobmk3qu8CCQUB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1331.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {1, :c}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{...}}, {8, :b} => %Chess.Square{ (truncated)
23:23:59.957 [error] GenServer #PID<0.1763.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.PiecesLib.generate_paths/3
    (chess 0.1.0) lib/chess/pieces/pieces_lib.ex:17: Chess.Pieces.PiecesLib.generate_paths(%Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, 1}, 1)
    (elixir 1.15.7) lib/enum.ex:1693: Enum."-map/2-lists^map/1-1-"/2
    (chess 0.1.0) lib/chess/pieces/knight.ex:17: Chess.Pieces.Knight.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhobmk3qu8CCQUB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "f", "row" => "3"}}, ref: "86", join_ref: "42"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhobmk3qu8CCQUB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.1763.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {1, :g}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{...}}, {8, :b} => %Chess.Square{column: :b (truncated)
23:24:31.760 [error] GenServer #PID<0.2389.0> terminating
** (FunctionClauseError) no function clause matching in Chess.Pieces.PiecesLib.generate_paths/3
    (chess 0.1.0) lib/chess/pieces/pieces_lib.ex:17: Chess.Pieces.PiecesLib.generate_paths(%Chess.Square{column: :e, row: 8, loc: {8, :e}, piece: :K, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, 0}, 1)
    (elixir 1.15.7) lib/enum.ex:1693: Enum."-map/2-lists^map/1-1-"/2
    (chess 0.1.0) lib/chess/pieces/king.ex:16: Chess.Pieces.King.moves/2
    (elixir 1.15.7) lib/enum.ex:4317: Enum.flat_map_list/2
    (chess 0.1.0) lib/chess/game.ex:50: Chess.Game.validate_move/3
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:251: :proc_lib.wake_up/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GEhobmk3qu8CCQUB", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "7"}}, ref: "107", join_ref: "87"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GEhobmk3qu8CCQUB", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.2389.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, live_action: nil, clicked_square: {8, :e}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :f} => %Chess.Square{column: :f, row: 7, loc: {7, :f}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :b} => %Chess.Square{column: :b, row: 6, loc: {6, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {4, :g} => %Chess.Square{column: :g, row: 4, loc: {4, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, :c}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {5, :g} => %Chess.Square{column: :g, row: 5, loc: {5, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], ...}}, {4, :h} => %Chess.Square{column: :h, row: 4, loc: {4, :h}, piece: nil, sees: %Chess.Square.Sees{...}}, {8, :b} => %Chess.Square{column: :b, row: (truncated)
20:47:59.676 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
20:47:59.687 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
20:47:59.688 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

20:48:01.426 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
20:48:01.431 [info] Access ChessWeb.Endpoint at http://localhost:4000
20:48:13.682 [info] GET /
20:48:19.357 [info] GET /chess
20:48:19.480 [info] Sent 200 in 122ms
20:48:19.586 [info] CONNECTED TO Phoenix.LiveView.Socket in 50Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Jj5JChNKHAMsPDFiPzNHCiEEd3AeXCpqas3ow-y4kot1qB-ahU1HQ-e3", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
20:48:19.656 [error] ** (Bandit.HTTPError) closed
21:24:49.600 [error] `inotify-tools` is needed to run `file_system` for your system, check https://github.com/rvoicilas/inotify-tools/wiki for more information about how to install it. If it's already installed but not be found, appoint executable file with `config.exs` or `FILESYSTEM_FSINOTIFY_EXECUTABLE_FILE` env.
21:24:49.605 [warning] Not able to start file_system worker, reason: {:error, :fs_inotify_bootstrap_error}
21:24:49.605 [warning] Could not start Phoenix live-reload because we cannot listen to the file system.
You don't need to worry! This is an optional feature used during development to
refresh your browser when you save files and it does not affect production.

21:24:50.907 [info] Running ChessWeb.Endpoint with Bandit 1.5.7 at 127.0.0.1:4000 (http)
21:24:50.909 [info] Access ChessWeb.Endpoint at http://localhost:4000
21:24:53.574 [info] CONNECTED TO Phoenix.LiveView.Socket in 54Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Jj5JChNKHAMsPDFiPzNHCiEEd3AeXCpqas3ow-y4kot1qB-ahU1HQ-e3", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:24:55.371 [info] CONNECTED TO Phoenix.LiveView.Socket in 40Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Jj5JChNKHAMsPDFiPzNHCiEEd3AeXCpqas3ow-y4kot1qB-ahU1HQ-e3", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:24:55.433 [info] CONNECTED TO Phoenix.LiveView.Socket in 50Âµs
  Transport: :longpoll
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "Jj5JChNKHAMsPDFiPzNHCiEEd3AeXCpqas3ow-y4kot1qB-ahU1HQ-e3", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "1", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:24:55.452 [info] GET /chess
21:24:55.563 [info] Sent 200 in 111ms
21:24:55.811 [info] CONNECTED TO Phoenix.LiveView.Socket in 54Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "dg4lKCwPF3ELBBcyNyk-Jx9pLwkVHg0Q1C_MHhrFLWRayXTLV8i1ZoBI", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:25:16.203 [error] GenServer #PID<0.853.0> terminating
** (WithClauseError) no with clause matching: false
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GElN0jvR8F27BwOk", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "3"}}, ref: "25", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GElN0jvR8F27BwOk", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.853.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :g} => %Chess.Square{column: :g, row: 7, loc: {7, :g}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, ...}, piece: :p, ...}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {...}, ...}, {3, :g} => %Chess.Square{column: :g, row: 3, ...}, {4, ...} => %Chess.Square{column: :h, ...}, {...} => %Chess.Square{... (truncated)
21:26:03.745 [info] GET /chess
21:26:03.753 [info] Sent 200 in 7ms
21:26:04.012 [info] CONNECTED TO Phoenix.LiveView.Socket in 47Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "cCZCJw8yKnkLKyo6ESEpCgAEGWgOJCRt7k8BkUONLxoi_PCaIU_PAUk4", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:26:13.514 [error] GenServer #PID<0.899.0> terminating
** (KeyError) key :board not found in: {:error, :king_in_check_after_move}

If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:26: anonymous fn/5 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:25: anonymous fn/3 in ChessWeb.Chesslive.render/1
    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:23: anonymous fn/2 in ChessWeb.Chesslive.render/1
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:391: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:555: anonymous fn/4 in Phoenix.LiveView.Diff.traverse_dynamic/7
    (elixir 1.15.7) lib/enum.ex:2510: Enum."-reduce/3-lists^foldl/2-0-"/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:389: Phoenix.LiveView.Diff.traverse/7
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/diff.ex:136: Phoenix.LiveView.Diff.render/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:960: anonymous fn/4 in Phoenix.LiveView.Channel.render_diff/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:955: Phoenix.LiveView.Channel.render_diff/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:811: Phoenix.LiveView.Channel.handle_changed/4
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GElN4hyFHK8VKQLh", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "3"}}, ref: "25", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GElN4hyFHK8VKQLh", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.899.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :g} => %Chess.Square{column: :g, row: 7, loc: {7, :g}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}},  (truncated)
21:28:21.569 [info] GET /chess
21:28:21.573 [info] Sent 200 in 3ms
21:28:21.666 [info] CONNECTED TO Phoenix.LiveView.Socket in 45Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "HSsIKysrMFZ0Cio2OhIMLTwCHg41An9uZfrNOLUa3YoetcfFuSX6zs07", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:28:36.546 [info] GET /chess
21:28:36.549 [info] Sent 200 in 2ms
21:28:36.627 [info] CONNECTED TO Phoenix.LiveView.Socket in 34Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "C3siLSoJL0cIFic1PgItAzAZJUsoGSQeL6XHNnJpOEbfpsGhyHcsghkG", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:28:36.661 [error] ** (Bandit.HTTPError) closed
21:28:44.171 [error] GenServer #PID<0.979.0> terminating
** (WithClauseError) no with clause matching: false
    (chess 0.1.0) lib/chess/game.ex:23: Chess.Game.move/2
    (chess 0.1.0) lib/chess_web/live/chesslive.ex:81: ChessWeb.Chesslive.handle_event/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:508: anonymous fn/3 in Phoenix.LiveView.Channel.view_handle_event/3
    (telemetry 1.3.0) /home/gikes/Projects/Elixir/chess_live/chess/deps/telemetry/src/telemetry.erl:324: :telemetry.span/3
    (phoenix_live_view 1.0.0-rc.7) lib/phoenix_live_view/channel.ex:260: Phoenix.LiveView.Channel.handle_info/2
    (stdlib 5.2.3.1) gen_server.erl:1095: :gen_server.try_handle_info/3
    (stdlib 5.2.3.1) gen_server.erl:1183: :gen_server.handle_msg/6
    (stdlib 5.2.3.1) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
Last message: %Phoenix.Socket.Message{topic: "lv:phx-GElOBbAn4gL_fwHl", event: "event", payload: %{"event" => "square-click", "type" => "click", "value" => %{"column" => "g", "row" => "3"}}, ref: "21", join_ref: "4"}
State: %{socket: #Phoenix.LiveView.Socket<id: "phx-GElOBbAn4gL_fwHl", endpoint: ChessWeb.Endpoint, view: ChessWeb.Chesslive, parent_pid: nil, root_pid: #PID<0.979.0>, router: ChessWeb.Router, assigns: %{__changed__: %{}, flash: %{}, game: %Chess.Game{board: %Chess.Board{squares: %{{3, :c} => %Chess.Square{column: :c, row: 3, loc: {3, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :f} => %Chess.Square{column: :f, row: 6, loc: {6, :f}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :c} => %Chess.Square{column: :c, row: 4, loc: {4, :c}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {8, :g} => %Chess.Square{column: :g, row: 8, loc: {8, :g}, piece: :N, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :a} => %Chess.Square{column: :a, row: 6, loc: {6, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :d} => %Chess.Square{column: :d, row: 3, loc: {3, :d}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :c} => %Chess.Square{column: :c, row: 1, loc: {1, :c}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :h} => %Chess.Square{column: :h, row: 2, loc: {2, :h}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :e} => %Chess.Square{column: :e, row: 1, loc: {1, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :b} => %Chess.Square{column: :b, row: 5, loc: {5, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {4, :a} => %Chess.Square{column: :a, row: 4, loc: {4, :a}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :d} => %Chess.Square{column: :d, row: 1, loc: {1, :d}, piece: :q, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {3, :e} => %Chess.Square{column: :e, row: 3, loc: {3, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :g} => %Chess.Square{column: :g, row: 7, loc: {7, :g}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :h} => %Chess.Square{column: :h, row: 1, loc: {1, :h}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {5, :e} => %Chess.Square{column: :e, row: 5, loc: {5, :e}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :a} => %Chess.Square{column: :a, row: 7, loc: {7, :a}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {6, :d} => %Chess.Square{column: :d, row: 6, loc: {6, :d}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :a} => %Chess.Square{column: :a, row: 1, loc: {1, :a}, piece: :r, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {1, :f} => %Chess.Square{column: :f, row: 1, loc: {1, :f}, piece: :b, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {7, :b} => %Chess.Square{column: :b, row: 7, loc: {7, :b}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :d} => %Chess.Square{column: :d, row: 2, loc: {2, :d}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], all: MapSet.new([])}}, {2, :f} => %Chess.Square{column: :f, row: 2, loc: {2, :f}, piece: :p, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], knight: [], ...}}, {6, :g} => %Chess.Square{column: :g, row: 6, loc: {6, :g}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], down_right: [], ...}}, {2, :e} => %Chess.Square{column: :e, row: 2, loc: {2, :e}, piece: :k, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], down_left: [], ...}}, {7, :e} => %Chess.Square{column: :e, row: 7, loc: {7, :e}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], up_left: [], ...}}, {4, :b} => %Chess.Square{column: :b, row: 4, loc: {4, :b}, piece: nil, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], up_right: [], ...}}, {1, :g} => %Chess.Square{column: :g, row: 1, loc: {1, :g}, piece: :n, sees: %Chess.Square.Sees{up: [], down: [], left: [], right: [], ...}}, {7, :c} => %Chess.Square{column: :c, row: 7, loc: {7, :c}, piece: :P, sees: %Chess.Square.Sees{up: [], down: [], left: [], ...}}, {8, :h} => %Chess.Square{column: :h, row: 8, loc: {8, :h}, piece: :R, sees: %Chess.Square.Sees{up: [], down: [], ...}}, {2, :b} => %Chess.Square{column: :b, row: 2, loc: {2, :b}, piece: :p, sees: %Chess.Square.Sees{up: [], ...}}, {2, :g} => %Chess.Square{column: :g, row: 2, loc: {2, :g}, piece: :p, sees: %Chess.Square.Sees{...}}, {2, :c} => %Chess.Square{column: :c, row: 2, loc: {2, ...}, piece: :p, ...}, {8, :b} => %Chess.Square{column: :b, row: 8, loc: {...}, ...}, {3, :g} => %Chess.Square{column: :g, row: 3, ...}, {4, ...} => %Chess.Square{column: :h, ...}, {...} => %Chess.Square{... (truncated)
21:31:01.324 [info] GET /chess
21:31:01.330 [info] Sent 200 in 5ms
21:31:01.437 [info] CONNECTED TO Phoenix.LiveView.Socket in 56Âµs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{"_csrf_token" => "PwZXLig3DwIiIipjfghTDHkLGUE2MD88xK-KLPj5eqo00y9g0Z_yyApe", "_live_referer" => "undefined", "_mount_attempts" => "0", "_mounts" => "0", "_track_static" => %{"0" => "http://localhost:4000/assets/app.css", "1" => "http://localhost:4000/assets/app.js"}, "vsn" => "2.0.0"}
21:31:01.467 [error] ** (Bandit.HTTPError) closed
